name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Run tests
        run: cargo test --lib

  bump_version:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-bump
        run: cargo install cargo-bump

      - name: Determine version bump
        id: determine-bump
        run: |
          # Get the commit message of the last commit
          commit_message=$(git log -1 --pretty=%B)

          # Determine the version bump type based on the commit message
          if [[ "$commit_message" =~ (bug|fix|perf|refactor|revert|style|test|ci|chore|docs|build|deps|release|security|patch) ]]; then
            echo "bump_type=patch" >> $GITHUB_ENV
          elif [[ "$commit_message" =~ (minor|feat) ]]; then
            echo "bump_type=minor" >> $GITHUB_ENV
          elif [[ "$commit_message" =~ major ]]; then
            echo "bump_type=major" >> $GITHUB_ENV
          else
            echo "No relevant commit message found"
            exit 1
          fi

      - name: Bump version
        run: |
          git config --global user.email "cesan3@gmail.com"
          git config --global user.name "Cesar Sanchez"

          if [ "${{ env.bump_type }}" == "patch" ]; then
            cargo bump patch
          elif [ "${{ env.bump_type }}" == "minor" ]; then
            cargo bump minor
          elif [ "${{ env.bump_type }}" == "major" ]; then
            cargo bump major
          fi

          cargo build
          git add Cargo.toml Cargo.lock
          git commit -m "ci: bump version"
          version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          git tag $version
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  publish:
#    runs-on: ubuntu-latest
#    needs: bump_version
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          show-progress: true
#
#      - name: Fetch all tags
#        run: git fetch --tags
#
#      - name: Set up Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          profile: minimal
#          override: true
#
#      - name: Get the latest tag
#        id: get_version
#        run: |
#          VERSION=$(git describe --tags --abbrev=0)
#          echo "VERSION=$VERSION"
#          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
#
#      - name: Checkout the latest tag
#        run: git checkout ${{ steps.get_version.outputs.VERSION }}
#
#      - name: Publish to crates.io
#        run: |
#          echo "GIT_TAG=$GIT_TAG"
#          echo cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#          GIT_TAG: ${{ steps.get_version.outputs.VERSION }}
